select * from user_cloud_ai_profiles;
select * from user_credentials;
select * from user_cloud_ai_profile_attributes where profile_name=upper('hke_oci_llama3_70b_profile');

exec dbms_cloud_ai.set_profile(profile_name => 'hke_oci_llama3_70b_profile');
exec dbms_cloud_ai.set_profile(profile_name => 'hke_oci_llama33_70b_profile');

begin
    dbms_cloud_ai.drop_profile(profile_name => 'hke_oci_llama3_70b_profile');
end;
/

begin
    dbms_cloud_ai.create_profile(
        profile_name => 'hke_oci_llama3_70b_profile',
        attributes =>
            '{
                "provider": "oci",
                "credential_name": "OCI_GENAI_CRED",
                "model" : "meta.llama-3.1-70b-instruct",
                "oci_apiformat": "GENERIC",
                "temperature": 0,
                "comments": true,
                "object_list": [{"owner":"HYSUN","name":"HKE_PROD_DEFECT"},{"owner":"HYSUN","name":"HKE_PROD_OUT_YEILD_QTY"}]
            }'
        );
end;
/

begin
    dbms_cloud_ai.create_profile(
        profile_name => 'hke_oci_llama33_70b_profile',
        attributes =>
            '{
                "provider": "oci",
                "credential_name": "OCI_GENAI_CRED",
                "model" : "meta.llama-3.3-70b-instruct",
                "oci_apiformat": "GENERIC",
                "temperature": 0,
                "comments": true,
                "object_list": [{"owner":"HYSUN","name":"HKE_PROD_DEFECT"},{"owner":"HYSUN","name":"HKE_PROD_OUT_YEILD_QTY"}]
            }'
        );
end;
/


begin
    dbms_cloud_ai.create_profile(
        profile_name => 'hke_oci_llama3_405b_profile',
        attributes =>
            '{
                "provider": "oci",
                "credential_name": "OCI_GENAI_CRED",
                "model" : "meta.llama-3.1-405b-instruct",
                "oci_apiformat": "GENERIC",
                "temperature": 0,
                "comments": true,
                "object_list": [{"owner":"HYSUN","name":"HKE_PROD_DEFECT"},{"owner":"HYSUN","name":"HKE_PROD_OUT_YEILD_QTY"}]
            }'
        );
end;
/




-- BEGIN
-- DBMS_NETWORK_ACL_ADMIN.APPEND_HOST_ACE (
--   HOST         => 'api.openai.com',
--   LOWER_PORT   => 443,
--   UPPER_PORT   => 443,
--   ACE          => xs$ace_type(
--       PRIVILEGE_LIST => xs$name_list('http'),
--       PRINCIPAL_NAME => 'HYSUN',
--       PRINCIPAL_TYPE => xs_acl.ptype_db));
-- END;
-- /

-- BEGIN
-- DBMS_NETWORK_ACL_ADMIN.APPEND_HOST_ACE (
--   HOST         => 'api.cohere.ai',
--   LOWER_PORT   => 443,
--   UPPER_PORT   => 443,
--   ACE          => xs$ace_type(
--       PRIVILEGE_LIST => xs$name_list('http'),
--       PRINCIPAL_NAME => 'HYSUN',
--       PRINCIPAL_TYPE => xs_acl.ptype_db));
-- END;
-- /


-- GRANT EXECUTE ON DBMS_CLOUD_AI TO HYSUN;
-- GRANT EXECUTE ON DBMS_CLOUD TO HYSUN;

CREATE TABLE IF NOT EXISTS "KMCHAT_RIVA" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"AUDIO" BLOB, 
	"MIME_TYPE" VARCHAR2(255), 
	"FILE_NAME" VARCHAR2(255), 
	"MODEL_NAME" VARCHAR2(255), 
	"TEXT_DISP" CLOB, 
	"TEXT_JSON" CLOB, 
	"RIVA_RESP" CLOB, 
	"APPUSER" VARCHAR2(255), 
	"URL" VARCHAR2(4000), 
	"VECTORDB_URL" VARCHAR2(4000), 
	"RIVA_URL" VARCHAR2(4000), 
	"CREATED_TIME" DATE DEFAULT CURRENT_DATE, 
	"PARENT_ID" NUMBER, 
	"FEEDBACK" VARCHAR2(100), 
    "SESSION_ID" VARCHAR2(50),
	 CONSTRAINT "KMCHAT_RIVA_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   );


  CREATE TABLE "KMCHAT_DICT" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"TYPE" VARCHAR2(500) NOT NULL ENABLE, 
	"SUB_TYPE" VARCHAR2(500), 
	"SUB_TYPE1" VARCHAR2(500), 
	"VALUE" VARCHAR2(4000), 
	"DESCRIPTION" VARCHAR2(4000), 
	"DESP1" VARCHAR2(4000), 
	"ACTIVE_YN" CHAR(1) DEFAULT 'Y', 
	"SEQ" NUMBER DEFAULT 1, 
	"UPDATED_BY" VARCHAR2(500), 
	"UPDATED_ON" DATE DEFAULT CURRENT_DATE, 
	 CONSTRAINT "KMCHAT_DICT_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   );



   CREATE SEQUENCE  "KMCHAT_DICT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 2 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;


   CREATE SEQUENCE  "KMCHAT_RIVA_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 305 CACHE 2 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;


create or replace package KMCHAT_FIN_PKG as
function llm_rest (
    P_URL in varchar2 default null,
    P_MODEL in varchar2 default null,
    P_TXT  in varchar2,
    P_CHAT_ID in number, 
    P_CLOB in CLOB default null,
    P_USER_ID in varchar2,
    P_RISK_LEVEL in varchar2)
    return number;
function clear_history (
    P_URL in varchar2 default null,
    P_USER_ID in varchar2)
    return varchar2;
end;
/

create or replace package body "KMCHAT_FIN_PKG" is
    function clear_history (
        P_URL in varchar2 default null,
        P_USER_ID in varchar2) return varchar2
    as
        l_clob clob;
        l_input varchar2(1000);
    begin
        apex_web_service.g_request_headers(1).name :=  'Content-Type';
        apex_web_service.g_request_headers(1).value := 'application/json';
        l_input := '"' || P_USER_ID || '"';
        apex_debug.info('URL is: ' || P_URL);
        
        l_clob := apex_web_service.make_rest_request(
            p_url => P_URL,
            p_http_method => 'POST',
            p_body => l_input 
        );
        
        return DBMS_LOB.SUBSTR(l_clob);
    exception when others then
        return SQLCODE || ': ' || SQLERRM;
    end clear_history;
    function LLM_REST(
        P_URL IN VARCHAR2,
        P_MODEL IN VARCHAR2,
        P_TXT IN VARCHAR2,
        P_CHAT_ID IN NUMBER,
        P_CLOB in CLOB,
        P_USER_ID in varchar2,
        P_RISK_LEVEL in varchar2
    ) return number
    as
        l_clob clob := P_CLOB;
        l_input  kmchat_riva.TEXT_JSON%type;
        j            apex_json.t_values;
        l_paths apex_t_varchar2;
        l_index  varchar2(50);
        p_chatID    number;
        l_disp kmchat_riva.TEXT_DISP%type;
        l_id number;
        intent_type number := 0;
        l_src varchar2(1024);
        l_sql varchar2(4000);
    begin
        apex_web_service.g_request_headers(1).name :=  'Content-Type';
        apex_web_service.g_request_headers(1).value := 'application/json';
        apex_debug.info('P_RISK_LEVEL = ' || P_RISK_LEVEL);
        
        l_input := '{"query":"'||P_TXT||'","ask":"'||P_TXT||'","model_name":"' || P_MODEL || '","userId":"' || P_USER_ID || '","user":"' || P_USER_ID || '","risk_level":"'|| P_RISK_LEVEL || '"}';
        update kmchat_riva set TEXT_DISP = P_TXT, TEXT_JSON = l_input, model_name = P_MODEL, url = P_URL where id=P_CHAT_ID;
        commit;
        begin
            if P_CLOB IS NOT NULL AND DBMS_LOB.GETLENGTH(P_CLOB) > 0 then 
                l_clob := P_CLOB;
            else
                l_clob := apex_web_service.make_rest_request(
                    p_url => P_URL,
                    p_http_method => 'POST',
                    p_body => l_input
                );
            end if;
            APEX_DEBUG.INFO('*** >>>> %s', l_clob);
            -- 解析返回
            apex_json.parse(j, replace(replace(l_clob, '\\n', '<br/>'), '\n', '<br/>'));
            if apex_json.does_exist(p_path => 'data[%d].content', p0 => 1, p_values => j) then
                intent_type := 1;
            end if;

            if apex_json.does_exist(p_path => 'data[%d].sql', p0 => 1, p_values => j) then
                l_sql := apex_json.get_varchar2(p_path => 'data[%d].sql', p0 => 1, p_values => j);
                l_sql := replace(l_sql, '<br/>', ' ');
                APEX_UTIL.SET_SESSION_STATE('SELECTAI_SQL', l_sql); 
            end if;

            APEX_DEBUG.INFO('*** intent_type is %s', intent_type);
            l_paths := apex_json.find_paths_like (
                p_values         => j,
                p_return_path => 'data[%]'
            );
            if intent_type = 0 then
                for i in 1 .. l_paths.count loop
                    if i = 1 then
                        l_disp := apex_json.get_varchar2(p_values => j, p_path => l_paths(i));
                    else 
                        l_disp := '<br>' || apex_json.get_varchar2(p_values => j, p_path => l_paths(i));
                    end if;
                end loop;
            else
                for i in 1 .. l_paths.count loop
                    l_index := P_CHAT_ID||'_'||i;
                    if i = 1 then
                        l_disp := apex_json.get_varchar2(p_values => j, p_path => l_paths(i)||'.content');
                    else 
                        if i = 2 then
                            l_disp := l_disp || '<div><a class="moreLink" id="a_'||l_index||'" onclick="showMore(this, '''||l_index||''');return false;" href="#">>> Show more</a><div class="moreDiv" style="display:none;" id="'||l_index||'"><ul>';
                        end if;
                        l_src := apex_json.get_clob(p_values => j, p_path => l_paths(i)||'.source');
                        if l_src = 'NA' then
                            l_disp := REPLACE(l_disp, 'Show more', 'Implementation briefing');
                            l_disp := l_disp || '<li class="super">'|| apex_json.get_clob(p_values => j, p_path => l_paths(i)||'.content') || '</li>';
                        else
                            l_disp := REPLACE(l_disp, 'Show more', 'RAG Sources');
                            l_disp := l_disp || '<li class="super">'|| apex_json.get_clob(p_values => j, p_path => l_paths(i)||'.content') ||' <span><a href="'||apex_json.get_clob(p_values => j, p_path => l_paths(i)||'.source')||'" target="_blank">[source]</a></span></li>';
                        end if;
                        if i = l_paths.count then
                            l_disp := l_disp || '</ul></div></div>';
                        end if;
                    end if;
                end loop;
            end if;
        exception when others then
            l_disp := SQLCODE||SQLERRM;
        end;
        l_id := KMCHAT_RIVA_SEQ.nextval;
            
        insert into kmchat_riva(id, TEXT_DISP, TEXT_JSON, CREATED_TIME, APPUSER, PARENT_ID, URL, model_name) 
            values(l_id, l_disp, l_clob, current_date, 'chatbot', P_CHAT_ID, P_URL, P_MODEL);
        commit;
        return l_id;
        exception when others then
            return null;
    end LLM_REST;
end "KMCHAT_FIN_PKG";
/